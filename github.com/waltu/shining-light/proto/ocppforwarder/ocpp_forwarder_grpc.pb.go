// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: ocpp_forwarder.proto

package ocppforwarder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OcppForwarder_ForwardMessage_FullMethodName      = "/ocppforwarder.OcppForwarder/ForwardMessage"
	OcppForwarder_NotifyCommandResult_FullMethodName = "/ocppforwarder.OcppForwarder/NotifyCommandResult"
)

// OcppForwarderClient is the client API for OcppForwarder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The service definition.
type OcppForwarderClient interface {
	// Forwards a raw OCPP message and gets potential response payload back
	ForwardMessage(ctx context.Context, in *OcppMessage, opts ...grpc.CallOption) (*ForwardResponse, error)
	// Notifies the server about the result of a command sent FROM server TO charger
	NotifyCommandResult(ctx context.Context, in *CommandResult, opts ...grpc.CallOption) (*NotificationResponse, error)
}

type ocppForwarderClient struct {
	cc grpc.ClientConnInterface
}

func NewOcppForwarderClient(cc grpc.ClientConnInterface) OcppForwarderClient {
	return &ocppForwarderClient{cc}
}

func (c *ocppForwarderClient) ForwardMessage(ctx context.Context, in *OcppMessage, opts ...grpc.CallOption) (*ForwardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardResponse)
	err := c.cc.Invoke(ctx, OcppForwarder_ForwardMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocppForwarderClient) NotifyCommandResult(ctx context.Context, in *CommandResult, opts ...grpc.CallOption) (*NotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, OcppForwarder_NotifyCommandResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcppForwarderServer is the server API for OcppForwarder service.
// All implementations must embed UnimplementedOcppForwarderServer
// for forward compatibility.
//
// The service definition.
type OcppForwarderServer interface {
	// Forwards a raw OCPP message and gets potential response payload back
	ForwardMessage(context.Context, *OcppMessage) (*ForwardResponse, error)
	// Notifies the server about the result of a command sent FROM server TO charger
	NotifyCommandResult(context.Context, *CommandResult) (*NotificationResponse, error)
	mustEmbedUnimplementedOcppForwarderServer()
}

// UnimplementedOcppForwarderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOcppForwarderServer struct{}

func (UnimplementedOcppForwarderServer) ForwardMessage(context.Context, *OcppMessage) (*ForwardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardMessage not implemented")
}
func (UnimplementedOcppForwarderServer) NotifyCommandResult(context.Context, *CommandResult) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyCommandResult not implemented")
}
func (UnimplementedOcppForwarderServer) mustEmbedUnimplementedOcppForwarderServer() {}
func (UnimplementedOcppForwarderServer) testEmbeddedByValue()                       {}

// UnsafeOcppForwarderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcppForwarderServer will
// result in compilation errors.
type UnsafeOcppForwarderServer interface {
	mustEmbedUnimplementedOcppForwarderServer()
}

func RegisterOcppForwarderServer(s grpc.ServiceRegistrar, srv OcppForwarderServer) {
	// If the following call pancis, it indicates UnimplementedOcppForwarderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OcppForwarder_ServiceDesc, srv)
}

func _OcppForwarder_ForwardMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OcppMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcppForwarderServer).ForwardMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OcppForwarder_ForwardMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcppForwarderServer).ForwardMessage(ctx, req.(*OcppMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcppForwarder_NotifyCommandResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcppForwarderServer).NotifyCommandResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OcppForwarder_NotifyCommandResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcppForwarderServer).NotifyCommandResult(ctx, req.(*CommandResult))
	}
	return interceptor(ctx, in, info, handler)
}

// OcppForwarder_ServiceDesc is the grpc.ServiceDesc for OcppForwarder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcppForwarder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocppforwarder.OcppForwarder",
	HandlerType: (*OcppForwarderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardMessage",
			Handler:    _OcppForwarder_ForwardMessage_Handler,
		},
		{
			MethodName: "NotifyCommandResult",
			Handler:    _OcppForwarder_NotifyCommandResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ocpp_forwarder.proto",
}
