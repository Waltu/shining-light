// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: charger_commander.proto

package chargercommander

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChargerCommander_SendCommand_FullMethodName = "/chargercommander.ChargerCommander/SendCommand"
)

// ChargerCommanderClient is the client API for ChargerCommander service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for sending commands to a specific charger via the listener
type ChargerCommanderClient interface {
	// Sends a command (as an OCPP Call message payload) to a specific charger
	SendCommand(ctx context.Context, in *SendCommandRequest, opts ...grpc.CallOption) (*SendCommandResponse, error)
}

type chargerCommanderClient struct {
	cc grpc.ClientConnInterface
}

func NewChargerCommanderClient(cc grpc.ClientConnInterface) ChargerCommanderClient {
	return &chargerCommanderClient{cc}
}

func (c *chargerCommanderClient) SendCommand(ctx context.Context, in *SendCommandRequest, opts ...grpc.CallOption) (*SendCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendCommandResponse)
	err := c.cc.Invoke(ctx, ChargerCommander_SendCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChargerCommanderServer is the server API for ChargerCommander service.
// All implementations must embed UnimplementedChargerCommanderServer
// for forward compatibility.
//
// Service definition for sending commands to a specific charger via the listener
type ChargerCommanderServer interface {
	// Sends a command (as an OCPP Call message payload) to a specific charger
	SendCommand(context.Context, *SendCommandRequest) (*SendCommandResponse, error)
	mustEmbedUnimplementedChargerCommanderServer()
}

// UnimplementedChargerCommanderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChargerCommanderServer struct{}

func (UnimplementedChargerCommanderServer) SendCommand(context.Context, *SendCommandRequest) (*SendCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedChargerCommanderServer) mustEmbedUnimplementedChargerCommanderServer() {}
func (UnimplementedChargerCommanderServer) testEmbeddedByValue()                          {}

// UnsafeChargerCommanderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChargerCommanderServer will
// result in compilation errors.
type UnsafeChargerCommanderServer interface {
	mustEmbedUnimplementedChargerCommanderServer()
}

func RegisterChargerCommanderServer(s grpc.ServiceRegistrar, srv ChargerCommanderServer) {
	// If the following call pancis, it indicates UnimplementedChargerCommanderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChargerCommander_ServiceDesc, srv)
}

func _ChargerCommander_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargerCommanderServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChargerCommander_SendCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargerCommanderServer).SendCommand(ctx, req.(*SendCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChargerCommander_ServiceDesc is the grpc.ServiceDesc for ChargerCommander service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChargerCommander_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chargercommander.ChargerCommander",
	HandlerType: (*ChargerCommanderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommand",
			Handler:    _ChargerCommander_SendCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "charger_commander.proto",
}
